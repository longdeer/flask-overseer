#
# PySNMP MIB module XPPC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/vla/ArrestedDevelopment/pygwarts/development/filch/mibs/XPPC-MIB.mib
# Produced by pysmi-0.3.4 at Thu Jul 27 11:34:16 2023
# On host pcfrn3 platform Linux version 5.19.0-50-generic by user vla
# Using Python version 3.10.6 (main, Nov 14 2022, 16:10:14) [GCC 11.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, NotificationType, Gauge32, iso, ObjectIdentity, ModuleIdentity, MibIdentifier, Integer32, enterprises, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "NotificationType", "Gauge32", "iso", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "Integer32", "enterprises", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ppc = MibIdentifier((1, 3, 6, 1, 4, 1, 935))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1))
ppcmgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 2))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1))
mconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 2, 1))
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1))
upsIdentp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1))
upsBatteryp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2))
upsInputp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3))
upsOutputp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4))
upsConfigp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5))
upsControlp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6))
upsTestp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7))
upsThreePhase = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8))
upsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9))
upsBaseIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 1))
upsSmartIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 2))
upsBaseBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 1))
upsSmartBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2))
upsBaseInput = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 1))
upsSmartInput = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 2))
upsBaseOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4, 1))
upsSmartOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4, 2))
upsBaseConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1))
upsSmartConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2))
upsBaseControl = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 1))
upsSmartControl = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 2))
upsBaseTest = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 1))
upsSmartTest = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2))
upsThreePhaseBatteryGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 1))
upsThreePhaseInputGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 2))
upsThreePhaseOutputGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3))
upsThreePhaseBypassGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 4))
upsThreePhaseDCandRectifierStatusGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5))
upsThreePhaseUPSStatusGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 6))
upsThreePhaseFaultStatusGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7))
upsThreePhaseRatingGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8))
mconfigTrapsReceiversNum = MibScalar((1, 3, 6, 1, 4, 1, 935, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mconfigTrapsReceiversNum.setStatus('mandatory')
if mibBuilder.loadTexts: mconfigTrapsReceiversNum.setDescription('The number of managers to send traps to.')
mconfigTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 935, 2, 1, 2), )
if mibBuilder.loadTexts: mconfigTrapsReceiversTable.setStatus('mandatory')
if mibBuilder.loadTexts: mconfigTrapsReceiversTable.setDescription('A list of managers to send traps to. The number of entries is given by the value of mconfigNumTrapReceivers')
mconfigTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 2, 1, 2, 1), ).setIndexNames((0, "XPPC-MIB", "trapsIndex"))
if mibBuilder.loadTexts: mconfigTrapsReceiversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mconfigTrapsReceiversEntry.setDescription('The managers to send traps to.')
trapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapsIndex.setDescription('The index to a trap receiver entry.')
trapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsReceiverAddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapsReceiverAddr.setDescription('The IP address of the manager to send a trap to.')
receiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: receiverCommunityString.setDescription('The community name to use in the trap when sent to the manager.')
severityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("information", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: severityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: severityLevel.setDescription('The severity threshold of traps to send to the manager. traps are labeled in severity as informational(1), warning(2), severe(3). Only traps of equal or greater severity than this value are sent to the manager.')
receiverAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverAccept.setStatus('mandatory')
if mibBuilder.loadTexts: receiverAccept.setDescription('An entry will become active if yes, and will be deleted if no.')
upsBaseIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseIdentModel.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseIdentModel.setDescription("The UPS model name (e.g. 'Intelligent 8000E 900VA').")
upsBaseIdentUpsName = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBaseIdentUpsName.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseIdentUpsName.setDescription('An 8 byte ID string identifying the UPS. This object can be set by the administrator.')
upsSmartIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartIdentFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartIdentFirmwareRevision.setDescription('The firmware revision of the UPS system.')
upsSmartIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartIdentDateOfManufacture.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartIdentDateOfManufacture.setDescription('The date when the UPS was manufactured in mm/dd/yy format.')
upsSmartIdentUpsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartIdentUpsSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartIdentUpsSerialNumber.setDescription('An 8-character string identifying the serial number of the UPS internal microprocessor. This number is set at the factory. NOTE: This number does NOT correspond to the serial number on the rear of the UPS.')
upsSmartIdentAgentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartIdentAgentFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartIdentAgentFirmwareRevision.setDescription('The firmware revision of the UPS SNMP Proxy agent.')
upsBaseBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseBatteryStatus.setDescription('The status of the UPS batteries. A batteryLow(3) value indicates the UPS will be unable to sustain the current load, and its services will be lost if power is not restored. The amount of run time in reserve at the time of low battery can be configured by the upsSmartConfigLowBatteryRunTime.')
upsBaseBatteryTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseBatteryTimeOnBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseBatteryTimeOnBattery.setDescription('The elapsed time in seconds since the UPS has switched to battery power.')
upsBaseBatteryLastReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBaseBatteryLastReplaceDate.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseBatteryLastReplaceDate.setDescription("The date when the UPS system's batteries were last replaced in mm/dd/yy format. For UPS models, this value is originally set in the factory. When the UPS batteries are replaced, this value should be reset by the administrator.")
upsSmartBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartBatteryCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartBatteryCapacity.setDescription('The remaining battery capacity expressed in percent of full capacity.')
upsSmartBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartBatteryVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartBatteryVoltage.setDescription('The current battery voltage expressed in 1/10 VDC.')
upsSmartBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartBatteryTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartBatteryTemperature.setDescription('The current internal UPS temperature expressed in tenths of a Celsius degree.')
upsSmartBatteryRunTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartBatteryRunTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartBatteryRunTimeRemaining.setDescription('The UPS battery run time remaining before battery exhaustion, in seconds.')
upsSmartBatteryReplaceIndicator = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noBatteryNeedsReplacing", 1), ("batteryNeedsReplacing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartBatteryReplaceIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartBatteryReplaceIndicator.setDescription('Indicates whether the UPS batteries need replacing.')
upsSmartBatteryFullChargeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartBatteryFullChargeVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartBatteryFullChargeVoltage.setDescription('The fully charged battery voltage of the battery system used in the UPS, expressed in tenths of a volt.')
upsSmartBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartBatteryCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartBatteryCurrent.setDescription('The current battery current expressed in percent of maximum current.')
upsBaseInputPhase = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseInputPhase.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseInputPhase.setDescription('The current AC input phase.')
upsSmartInputLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartInputLineVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartInputLineVoltage.setDescription('The current utility line voltage in 1/10 VAC.')
upsSmartInputMaxLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartInputMaxLineVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartInputMaxLineVoltage.setDescription('The maximum utility line voltage in 1/10 VAC over the previous 1 minute period.')
upsSmartInputMinLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartInputMinLineVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartInputMinLineVoltage.setDescription('The minimum utility line voltage in 1/10 VAC over the previous 1 minute period.')
upsSmartInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartInputFrequency.setDescription('The current input frequency to the UPS system in 1/10 Hz.')
upsSmartInputLineFailCause = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noTransfer", 1), ("highLineVoltage", 2), ("brownout", 3), ("blackout", 4), ("smallMomentarySag", 5), ("deepMomentarySag", 6), ("smallMomentarySpike", 7), ("largeMomentarySpike", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartInputLineFailCause.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartInputLineFailCause.setDescription('The reason for the occurrence of the last transfer to UPS battery power. The variable is set to noTransfer(1) if there is no transfer yet. The variable is set to highLineVoltage(2) if the transfer to battery is caused by an over voltage greater than the high transfer voltage. The variable is set to brownout(3) if the duration of the outage is greater than five seconds and the line voltage is between 40 percent of the rated output voltage and the low transfer voltage. The variable is set to blackout(4) if the duration of the outage is greater than five seconds and the line voltage is between 40 percent of the rated output voltage and ground. The variable is set to smallMomentarySag(5) if the duration of the outage is less than five seconds and the line voltage is between 40 percent of the rated output voltage and the low transfer voltage. The variable is set to deepMomentarySag(6) if the duration of the outage is less than five seconds and the line voltage is between 40 percent of the rated output voltage and ground.')
upsBaseOutputStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("onLine", 2), ("onBattery", 3), ("onBoost", 4), ("sleeping", 5), ("onBypass", 6), ("rebooting", 7), ("standBy", 8), ("onBuck", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseOutputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseOutputStatus.setDescription('The current state of the UPS. If the UPS is unable to determine the state of the UPS this variable is set to unknown(1).')
upsBaseOutputPhase = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseOutputPhase.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseOutputPhase.setDescription('The current output phase.')
upsSmartOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartOutputVoltage.setDescription('The output voltage of the UPS system in 1/10 VAC.')
upsSmartOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartOutputFrequency.setDescription('The current output frequency of the UPS system in 1/10 Hz.')
upsSmartOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartOutputLoad.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartOutputLoad.setDescription('The current UPS load expressed in percent of rated capacity.')
upsBaseConfigNumDevices = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBaseConfigNumDevices.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseConfigNumDevices.setDescription('The number of devices that are plugged into the UPS.')
upsBaseConfigDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1, 2), )
if mibBuilder.loadTexts: upsBaseConfigDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseConfigDeviceTable.setDescription('A list of devices that are plugged into the UPS. The number of entries is given by the value of upsBaseConfigNumDevices.')
upsBaseConfigDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "XPPC-MIB", "indexOfDevice"))
if mibBuilder.loadTexts: upsBaseConfigDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseConfigDeviceEntry.setDescription('The devices plugged in to the UPS.')
indexOfDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: indexOfDevice.setStatus('mandatory')
if mibBuilder.loadTexts: indexOfDevice.setDescription('The index of the device that is plugged into the UPS.')
nameOfDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameOfDevice.setStatus('mandatory')
if mibBuilder.loadTexts: nameOfDevice.setDescription('The name/description of the device plugged into the UPS.')
vaRatingOfDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vaRatingOfDevice.setStatus('mandatory')
if mibBuilder.loadTexts: vaRatingOfDevice.setDescription('The volt-amp rating of the device plugged into the UPS.')
deviceAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceAccept.setStatus('mandatory')
if mibBuilder.loadTexts: deviceAccept.setDescription('An entry is added if yes, the entry is deleted if no.')
upsSmartConfigRatedOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigRatedOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartConfigRatedOutputVoltage.setDescription('The nominal output voltage from the UPS in 1/10 VAC. Possible values are 1000, 1200, 2080, 2200, 2250, 2300 and 2400. NOTE: Only units that are 2200, 2250, 2300 and 2400 can be changed. Allowable values are 2200, 2250, 2300 and 2400. For these adjustable units, if a value other than a supported value is provided in a set request, the UPS interprets it as the next lower acceptable value. If the provided value is lower than the lowest acceptable value, the lowest acceptable value is used.')
upsSmartConfigHighTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigHighTransferVolt.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartConfigHighTransferVolt.setDescription('The maximum line voltage in 1/10 VAC allowed before the UPS system transfers to battery backup. Allowed value depend on the UPS used: 120 Volt units allow settings of 1290, 1320, 1350, 1380. 100 Volt units allow settings of 1080, 1100, 1120, 1140. 230 Volt units allow settings of 2530, 2640, 2710, 2800. 208 Volt units allow settings of 2240, 2290, 2340, 2390. If a value other than a supported value is provided in a set request, the UPS interprets it as the next lower acceptable value. If the provided value is lower than the lowest acceptable value, the lowest acceptable value is used.')
upsSmartConfigLowTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigLowTransferVolt.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartConfigLowTransferVolt.setDescription('The minimum line voltage in 1/10 VAC allowed before the UPS system transfers to battery backup. Allowable values depend on the UPS used: 120 Volt units allow settings of 970, 1000, 1030, 1060. 100 Volt units allow settings of 810, 830, 850, 870. 230 Volt units allow settings of 1880, 1960, 2040, 2080. 208 Volt units allow settings of 1680, 1720, 1770, 1820. If a value other than a supported value is provided in a set request, the UPS interprets it as a the next higher acceptable value. If the provided value is higher than the highest acceptable value, the highest acceptable value is used.')
upsSmartConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("timed", 1), ("atLowBattery", 2), ("never", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartConfigAlarm.setDescription('A flag indicating how the UPS should handle audible line fail alarms.')
upsSmartConfigAlarmTimer = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigAlarmTimer.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartConfigAlarmTimer.setDescription('The time in seconds after initial line failure at which the UPS begins emitting audible alarms (beeping). This timer is observerd only if the value of extControlAlarm is timed(2). Allowed values are 0 or 30 seconds. If a value other than a supported value is provided in a set request, the UPS interprets it as a the next lower acceptable value. If the provided value is lower than the lowest acceptable value, the lowest acceptable value is used.')
upsSmartConfigMinReturnCapacity = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigMinReturnCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartConfigMinReturnCapacity.setDescription('The minimum battery capacity as a percent of full capacity required before the UPS will return from a low battery shutdown condition. In other words, the UPS will not re-energize the output until the battery capacity is equal to this value. Allowed values are 0, 10, 25, or 90 percent. If a value other than a supported value is provided in a set request, the UPS interprets it as a the next higher acceptable value. If the provided value is higher than the highest acceptable value, the highest acceptable value is used.')
upsSmartConfigSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("low", 2), ("medium", 3), ("high", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartConfigSensitivity.setDescription('The sensitivity of the UPS to utility line abnormalities or noises.')
upsSmartConfigLowBatteryRunTime = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigLowBatteryRunTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartConfigLowBatteryRunTime.setDescription('The desired run time in seconds once the low battery condition is reached. Allowed values are 120, 300, 420, or 600 seconds. During this time the UPS will produce a constant warning tone which can not be disabled. If a value other than a supported value is provided in a set request, the UPS interprets it as a the next higher acceptable value. If the provided value is higher than the highest acceptable value, the highest acceptable value is used.')
upsSmartConfigReturnDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigReturnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartConfigReturnDelay.setDescription("The delay in seconds after utility line power returns before the UPS will turn on. This value is also used when the UPS comes out of a reboot and before the UPS wakes up from 'sleep' mode. Allowed values are 0, 60, 180 and 300 seconds. If a value other than a supported value is provided in a set request, the UPS interprets it as a the next higher acceptable value. If the provided value is higher than the highest acceptable value, the highest acceptable value is used.")
upsSmartConfigShutoffDelay = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigShutoffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartConfigShutoffDelay.setDescription('The delay in seconds the UPS remains on after being told to turn off. Allowed values are 12, 18, 24, 30, 36, 42, 48, 54, 60, 120, 180, 240, 300, 360, 420, 480, 540, and 600 seconds. If a value other than a supported value is provided in a set request, the UPS interprets it as next higher acceptable value. If the provided value is higher than the highest acceptable value, the highest acceptable value is used.')
upsSmartConfigUpsSleepTime = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigUpsSleepTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartConfigUpsSleepTime.setDescription("The time in minutes for the UPS to go to 'sleep' when instructed. When in sleep mode, the UPS will not provide output power regardless of the input line state. Once the specified time has elapsed, output power will be restored. This is a configuration setting. The UPS will not go to sleep until told to do so by the manager from a management station. Any input value is allowed, however the UPS only recognizes 0 - 9999 minutes in one minute increments. If the provided value is higher than the highest acceptable value, the highest acceptable value is used.")
upsSmartConfigSetEEPROMDefaults = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 5, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSetEEPROMDefaults", 1), ("setEEPROMDefaults", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartConfigSetEEPROMDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartConfigSetEEPROMDefaults.setDescription('WRITE: Resets the UPS EEPROM variables to default values. READ: returns 0')
upsBaseControlConserveBattery = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noTurnOffUps", 1), ("turnUpsOffToConserveBattery", 2), ("turnUpsOffToConserveBatteryDelay", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBaseControlConserveBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsBaseControlConserveBattery.setDescription("Setting this variable to turnUpsOffToConserveBattery(2) causes a UPS on battery to be put into 'sleep' mode immediately. The (10) means suspending time(10 minutes) before turn off UPS. UPS will turn back on when utility power is restored. Attempting to turn off a UPS that is not on battery will result in a badValue error. Setting this value to noTurnOffUps(1) has no effect. The value noTurnOffUps(1) will always be returned when the variable is read.")
upsSmartControlUpsOff = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTurnUpsOff", 1), ("turnUpsOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartControlUpsOff.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartControlUpsOff.setDescription('Setting this variable to turnUpsOff(2) causes the UPS to shut off. When in this state, the UPS will not provide output power regardless of the input line state. The on/off switch on the UPS must be toggled for the UPS to return to operation. Setting this value to noTurnUpsOff(1) has no effect. The value noTurnUpsOff(1) will always be returned when the variable is read.')
upsSmartControlRebootUps = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRebootUps", 1), ("rebootUps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartControlRebootUps.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartControlRebootUps.setDescription('Setting this variable to rebootUps(2) causes the UPS to shut off and turn back on. Setting this value to noRebootUps(1) has no effect. The value noRebootUps(1) will always be returned when the variable is read.')
upsSmartControlUpsSleep = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPutUpsToSleep", 1), ("putUpsToSleep", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartControlUpsSleep.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartControlUpsSleep.setDescription('Setting this variable to putUpsToSleep(2) causes the UPS to go to sleep for the time specified by upsSmartConfigUpsSleepTime. When in sleep mode, the UPS will not provide output power regardless of the input line state. Once the specified time has elapsed, output power will be restored. Setting this value to noPutUpsToSleep(1) has no effect. The value noPutUpsToSleep(1) will always be returned when the variable is read.')
upsSmartControlSimulatePowerFail = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSimulatePowerFailure", 1), ("simulatePowerFailure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartControlSimulatePowerFail.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartControlSimulatePowerFail.setDescription('Setting this variable to simulatePowerFailure(2) causes the UPS switch to battery power. Setting this value to noSimulatePowerFailure(1) has no effect. The value noSimulatePowerFailure(1) will always be returned when the variable is read.')
upsSmartControlFlashAndBeep = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noFlashAndBeep", 1), ("flashAndBeep", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartControlFlashAndBeep.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartControlFlashAndBeep.setDescription('UPS to identify itself by lighting all indicators and beeping. Setting this variable to FlashAndBeep(2) causes the UPS lights all panel indicators and beeps. Setting this value to noFlashAndBeep(1) has no effect. The value noFlashAndBeep(1) will always be returned when the variable is read.')
upsSmartControlTurnOnUpsLoad = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 6, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noUpsSmartControlTurnOnUpsLoad", 1), ("upsSmartControlTurnOnUpsLoad", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartControlTurnOnUpsLoad.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartControlTurnOnUpsLoad.setDescription('Setting this variable to upsSmartControlTurnOnUpsLoad(2) causes the UPS switch back to utility power if utility power is present. Setting this value to noUpsSmartControlTurnOnUpsLoad(1) has no effect. The value noUpsSmartControlTurnOnUpsLoad(1) will always be returned when the variable is read.')
upsSmartTestDiagnosticSchedule = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("biweekly", 2), ("weekly", 3), ("never", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartTestDiagnosticSchedule.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartTestDiagnosticSchedule.setDescription("The UPS system's automatic battery test schedule.")
upsSmartTestDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestDiagnostics", 1), ("testDiagnostics", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartTestDiagnostics.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartTestDiagnostics.setDescription('Setting this variable to testDiagnostics(2) causes the UPS to perform a diagnostic self test. Setting this value to noTestDiagnostics(1) has no effect. The value noTestDiagnostics(1) will always be returned when the variable is read.')
upsSmartTestDiagnosticsResults = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("invalidTest", 3), ("testInProgress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartTestDiagnosticsResults.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartTestDiagnosticsResults.setDescription('The results of the last UPS diagnostics test performed.')
upsSmartTestLastDiagnosticsDate = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartTestLastDiagnosticsDate.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartTestLastDiagnosticsDate.setDescription('The date the last UPS diagnostics test was performed in mm/dd/yy format.')
upsSmartTestIndicators = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTestIndicators", 1), ("testIndicators", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartTestIndicators.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartTestIndicators.setDescription('Setting this variable to testIndicators(2) causes the UPS to perform a front panel indicator (lights) test. Setting this value to noTestIndicators(1) has no effect. The value noTestIndicators(1) will always be returned when the variable is read.')
upsSmartTestRuntimeCalibration = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noPerformCalibration", 1), ("performCalibration", 2), ("cancelCurrentCalibration", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSmartTestRuntimeCalibration.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartTestRuntimeCalibration.setDescription('Setting this variable to performCalibration(2) causes the UPS to discharge to calibrate the UPS. The test will only start if the battery capacity is 100 percent. The test runs until capacity is less than 25 percent. Setting this variable to cancelCurrentCalibration(3) after setting performCalibration(2) will cancel the current discharge. Setting this variable to noPerformCalibration(1) will have no effect. The value noPerformCalibration(1) will always be returned when the variable is read. The result of the calibration will be saved in upsSmartTestCalibrationResult.')
upsSmartTestCalibrationResults = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("invalidTest", 2), ("calibrationInProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartTestCalibrationResults.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartTestCalibrationResults.setDescription('The results of the last runtime calibration. Value ok(1) means a successful runtime calibration. Value invalidTest(2) indicates last calibration did not take place since the battery capacity was below 100 percent. Value calibrationInProgress(3) means a calibration is occurring now.')
upsSmartTestCalibrationDate = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 7, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSmartTestCalibrationDate.setStatus('mandatory')
if mibBuilder.loadTexts: upsSmartTestCalibrationDate.setDescription('The date the last UPS runtime calibration was performed in mm/dd/yy format.')
upsThreePhaseBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBatteryVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseBatteryVoltage.setDescription('Battery Voltage')
upsThreePhaseBatteryCapacityPercentage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBatteryCapacityPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseBatteryCapacityPercentage.setDescription('Battery Capacity Percentage')
upsThreePhaseBatteryTimeRemain = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBatteryTimeRemain.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseBatteryTimeRemain.setDescription('Battery Time Remain (unit is Minute)')
upsThreePhaseBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBatteryCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseBatteryCurrent.setDescription('Battery Electric Current')
upsThreePhaseBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBatteryTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseBatteryTemperature.setDescription('Battery Temperature')
upsThreePhaseInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseInputFrequency.setDescription('Input Frequency')
upsThreePhaseInputVoltageR = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseInputVoltageR.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseInputVoltageR.setDescription('Input VoltageR')
upsThreePhaseInputVoltageS = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseInputVoltageS.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseInputVoltageS.setDescription('Input VoltageS')
upsThreePhaseInputVoltageT = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseInputVoltageT.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseInputVoltageT.setDescription('Input VoltageT')
upsThreePhaseOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseOutputFrequency.setDescription('Output Frequency')
upsThreePhaseOutputVoltageR = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseOutputVoltageR.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseOutputVoltageR.setDescription('Output VoltageR')
upsThreePhaseOutputVoltageS = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseOutputVoltageS.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseOutputVoltageS.setDescription('Output VoltageS')
upsThreePhaseOutputVoltageT = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseOutputVoltageT.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseOutputVoltageT.setDescription('Output VoltageT')
upsThreePhaseOutputLoadPercentageR = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseOutputLoadPercentageR.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseOutputLoadPercentageR.setDescription('Load PercentageR')
upsThreePhaseOutputLoadPercentageS = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseOutputLoadPercentageS.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseOutputLoadPercentageS.setDescription('Load PercentageS')
upsThreePhaseOutputLoadPercentageT = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseOutputLoadPercentageT.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseOutputLoadPercentageT.setDescription('Load PercentageT')
upsThreePhaseBypassSourceFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBypassSourceFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseBypassSourceFrequency.setDescription('Bypass Frequency')
upsThreePhaseBypssSourceVoltageR = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBypssSourceVoltageR.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseBypssSourceVoltageR.setDescription('Bypass VoltageR')
upsThreePhaseBypssSourceVoltageS = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBypssSourceVoltageS.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseBypssSourceVoltageS.setDescription('Bypass VoltageS')
upsThreePhaseBypssSourceVoltageT = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseBypssSourceVoltageT.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseBypssSourceVoltageT.setDescription('Bypass VoltageT')
upsThreePhaseDCandRectifierStatusRecRotError = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusRecRotError.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusRecRotError.setDescription('Rectifier Rotation Error')
upsThreePhaseDCandRectifierStatusLowBatteryShutdown = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusLowBatteryShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusLowBatteryShutdown.setDescription('Low Battery Shutdown')
upsThreePhaseDCandRectifierStatusLowBattery = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusLowBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusLowBattery.setDescription('Low Battery')
upsThreePhaseDCandRectifierStatusInAndOut = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("threeInOneOut", 2), ("threeInThreeOut", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusInAndOut.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusInAndOut.setDescription('In And Put')
upsThreePhaseDCandRectifierStatusBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("backup", 4), ("acnormal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusBatteryStatus.setDescription('Back Status')
upsThreePhaseDCandRectifierStatusChargeStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 16))).clone(namedValues=NamedValues(("boost", 6), ("float", 7), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusChargeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusChargeStatus.setDescription('Charge Status')
upsThreePhaseDCandRectifierStatusRecOperating = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusRecOperating.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseDCandRectifierStatusRecOperating.setDescription('Rectifier Operating')
upsThreePhaseUPSStatusBypassFreqFail = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseUPSStatusBypassFreqFail.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseUPSStatusBypassFreqFail.setDescription('Bypass Status')
upsThreePhaseUPSStatusManualBypassBreaker = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9))).clone(namedValues=NamedValues(("close", 8), ("open", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseUPSStatusManualBypassBreaker.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseUPSStatusManualBypassBreaker.setDescription('Breaker Status')
upsThreePhaseUPSStatusACStatus = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11))).clone(namedValues=NamedValues(("normal", 10), ("abnormal", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseUPSStatusACStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseUPSStatusACStatus.setDescription('AC Status')
upsThreePhaseUPSStaticSwitchMode = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 13))).clone(namedValues=NamedValues(("invermode", 12), ("bypassmode", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseUPSStaticSwitchMode.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseUPSStaticSwitchMode.setDescription('Switch Mode')
upsThreePhaseUPSStatusInverterOperating = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseUPSStatusInverterOperating.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseUPSStatusInverterOperating.setDescription('Operating')
upsThreePhaseFaultStatusEmergencyStop = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseFaultStatusEmergencyStop.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseFaultStatusEmergencyStop.setDescription('Emergency Stop')
upsThreePhaseFaultStatusHighDCShutdown = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseFaultStatusHighDCShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseFaultStatusHighDCShutdown.setDescription('High DC Shutdown')
upsThreePhaseFaultStatusBypassBreaker = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseFaultStatusBypassBreaker.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseFaultStatusBypassBreaker.setDescription('Bypass Breaker')
upsThreePhaseFaultStatusOverLoad = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseFaultStatusOverLoad.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseFaultStatusOverLoad.setDescription('Over Load')
upsThreePhaseFaultStatusInverterOutputFail = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseFaultStatusInverterOutputFail.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseFaultStatusInverterOutputFail.setDescription('Output Fail')
upsThreePhaseFaultStatusOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseFaultStatusOverTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseFaultStatusOverTemperature.setDescription('Over Temperature')
upsThreePhaseFaultStatusShortCircuit = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(14, 16))).clone(namedValues=NamedValues(("yes", 14), ("no", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseFaultStatusShortCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseFaultStatusShortCircuit.setDescription('Short Circuit')
upsThreePhaseRatingRectifierVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingRectifierVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseRatingRectifierVoltage.setDescription('Rectifier Voltage')
upsThreePhaseRatingRectifierFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingRectifierFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseRatingRectifierFrequency.setDescription('Rectifier Frequency')
upsThreePhaseRatingBypassVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingBypassVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseRatingBypassVoltage.setDescription('Bypass Voltage')
upsThreePhaseRatingBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingBypassFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseRatingBypassFrequency.setDescription('Bypass Frequency')
upsThreePhaseRatingOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseRatingOutputVoltage.setDescription('Output Voltage')
upsThreePhaseRatingOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseRatingOutputFrequency.setDescription('Output Frequency')
upsThreePhaseRatingBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingBatteryVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseRatingBatteryVoltage.setDescription('Battery Voltage')
upsThreePhaseRatingPower = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 8, 8, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsThreePhaseRatingPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsThreePhaseRatingPower.setDescription('Power Rating')
upsEnvStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1))
upsEnvTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvTemperature.setDescription('The ambient environment temperature.')
upsEnvHumidity = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvHumidity.setDescription('The environment humidity.')
upsEnvOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvOverTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvOverTemperature.setDescription('Alarm dupsAlarmOverTemperature on when the environment temperature over the value.')
upsEnvOverHumidity = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvOverHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvOverHumidity.setDescription('Alarm dupsAlarmOverHumidity on when the environment humidity over the value.')
upsEnvSecurity1 = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSecurity1.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvSecurity1.setDescription('Security status')
upsEnvSecurity2 = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSecurity2.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvSecurity2.setDescription('Security status')
upsEnvSecurity3 = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSecurity3.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvSecurity3.setDescription('Security status')
upsEnvSecurity4 = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSecurity4.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvSecurity4.setDescription('Security status')
upsEnvSecurity5 = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSecurity5.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvSecurity5.setDescription('Security status')
upsEnvSecurity6 = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSecurity6.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvSecurity6.setDescription('Security status')
upsEnvSecurity7 = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSecurity7.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvSecurity7.setDescription('Security status')
upsEnvWater = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvWater.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvWater.setDescription('Water status')
upsEnvSmoke = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvSmoke.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvSmoke.setDescription('Smoke status')
upsEnvSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 2))
upsEnvUnderTemperature = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvUnderTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvUnderTemperature.setDescription('Alarm dupsAlarmUnderTemperature on when the environment temperature below the value.')
upsEnvUnderHumidity = MibScalar((1, 3, 6, 1, 4, 1, 935, 1, 1, 1, 9, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvUnderHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: upsEnvUnderHumidity.setDescription('Alarm dupsAlarmUnderHumidity on when the environment humidity below the value.')
communicationLost = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,1))
if mibBuilder.loadTexts: communicationLost.setDescription('SEVERE: Communication to the UPS has been lost. Steps to reestablish communication are in progress.')
upsOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,2))
if mibBuilder.loadTexts: upsOverLoad.setDescription('SEVERE: The UPS has sensed a load greater than 100 percent of its rated capacity.')
upsDiagnosticsFailed = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,3))
if mibBuilder.loadTexts: upsDiagnosticsFailed.setDescription('SEVERE: The UPS failed its internal diagnostic self-test.')
upsDischarged = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,4))
if mibBuilder.loadTexts: upsDischarged.setDescription('SEVERE: The UPS just started a runtime calibration discharge. The UPS batteries are being discharged.')
upsOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,5))
if mibBuilder.loadTexts: upsOnBattery.setDescription('WARNING: The UPS has switched to battery backup power.')
boostOn = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,6))
if mibBuilder.loadTexts: boostOn.setDescription('WARNING: The UPS has enabled Boost.')
lowBattery = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,7))
if mibBuilder.loadTexts: lowBattery.setDescription("SEVERE: The UPS batteries are low and will soon be exhausted. If utility power is not restored the UPS will put itself to 'sleep' and immediately cut power to the load.")
communicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,8))
if mibBuilder.loadTexts: communicationEstablished.setDescription('INFORMATION: Communication with the UPS has been established.')
powerRestored = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,9))
if mibBuilder.loadTexts: powerRestored.setDescription('INFORMATION: Utility power has been restored.')
upsDiagnosticsPassed = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,10))
if mibBuilder.loadTexts: upsDiagnosticsPassed.setDescription('INFORMATION: The UPS passed its internal self-test.')
returnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,11))
if mibBuilder.loadTexts: returnFromLowBattery.setDescription('INFORMATION: The UPS has returned from a low battery condition.')
upsTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,12))
if mibBuilder.loadTexts: upsTurnedOff.setDescription("WARNING: The UPS has been turned 'off' by the management station.")
upsSleeping = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,13))
if mibBuilder.loadTexts: upsSleeping.setDescription("WARNING: The UPS is entering 'sleep' mode. Power to the load will be cut off.")
upsWokeUp = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,14))
if mibBuilder.loadTexts: upsWokeUp.setDescription("INFORMATION: The UPS woke up from 'sleep' mode. Power to the load has been restored.")
upsRebootStarted = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,15))
if mibBuilder.loadTexts: upsRebootStarted.setDescription('WARNING: The UPS has started its reboot sequence. After the specified delay the UPS will perform a reboot.')
envOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,16))
if mibBuilder.loadTexts: envOverTemperature.setDescription('WARNING: The environment temperature exceed the normal value.')
envTemperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,17))
if mibBuilder.loadTexts: envTemperatureNormal.setDescription('INFORMATION: The environment temperature is normal.')
envOverHumidity = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,18))
if mibBuilder.loadTexts: envOverHumidity.setDescription('WARNING: The environment humidity exceed the normal value.')
envHumidityNormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,19))
if mibBuilder.loadTexts: envHumidityNormal.setDescription('INFORMATION: The environment humidity is normal.')
envSmokeAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,20))
if mibBuilder.loadTexts: envSmokeAbnormal.setDescription('WARNING: Smoke is abnormal.')
envWaterAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,21))
if mibBuilder.loadTexts: envWaterAbnormal.setDescription('WARNING: Water is abnormal.')
envSecurityAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,22))
if mibBuilder.loadTexts: envSecurityAbnormal.setDescription('WARNING: Security is abnormal.')
envWaterNormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,24))
if mibBuilder.loadTexts: envWaterNormal.setDescription('INFORMATION: Water is normal.')
envGasAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,26))
if mibBuilder.loadTexts: envGasAbnormal.setDescription('WARNING: Gas Alarm')
upsTemp = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,27))
if mibBuilder.loadTexts: upsTemp.setDescription('WARNING: UPS Temperature Overrun')
upsLoadNormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,28))
if mibBuilder.loadTexts: upsLoadNormal.setDescription('WARNING: UPS Load Normal')
upsTempNormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,29))
if mibBuilder.loadTexts: upsTempNormal.setDescription('WARNING: UPS temperature Normal')
envUnderTemperature = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,30))
if mibBuilder.loadTexts: envUnderTemperature.setDescription('WARNING: The environment temperature below the normal value.')
envUnderHumidity = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,31))
if mibBuilder.loadTexts: envUnderHumidity.setDescription('WARNING: The environment humidity below the normal value.')
upsBypass = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,32))
if mibBuilder.loadTexts: upsBypass.setDescription("WARNING: The UPS is entering 'bypass' mode.")
envSecurity1 = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,33))
if mibBuilder.loadTexts: envSecurity1.setDescription('WARNING: Security1 Alarm.')
envSecurity2 = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,34))
if mibBuilder.loadTexts: envSecurity2.setDescription('WARNING: Security2 Alarm.')
envSecurity3 = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,35))
if mibBuilder.loadTexts: envSecurity3.setDescription('WARNING: Security3 Alarm.')
envSecurity4 = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,36))
if mibBuilder.loadTexts: envSecurity4.setDescription('WARNING: Security4 Alarm.')
envSecurity5 = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,37))
if mibBuilder.loadTexts: envSecurity5.setDescription('WARNING: Security5 Alarm.')
envSecurity6 = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,38))
if mibBuilder.loadTexts: envSecurity6.setDescription('WARNING: Security6 Alarm.')
envSecurity7 = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,39))
if mibBuilder.loadTexts: envSecurity7.setDescription('WARNING: Security7 Alarm.')
upsRecroterror = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,47))
if mibBuilder.loadTexts: upsRecroterror.setDescription('WARNING: Rectifier Rotation Error')
upsBypassFreFail = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,48))
if mibBuilder.loadTexts: upsBypassFreFail.setDescription('WARNING: Bypass Frequency Fail')
upsBypassacnormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,49))
if mibBuilder.loadTexts: upsBypassacnormal.setDescription('WARNING: Bypass AC Normal')
upsBypassacabnormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,50))
if mibBuilder.loadTexts: upsBypassacabnormal.setDescription('WARNING: Bypass AC Abnormal')
upsTest = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,51))
if mibBuilder.loadTexts: upsTest.setDescription('WARNING: UPS Test')
upsScheduleShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,52))
if mibBuilder.loadTexts: upsScheduleShutdown.setDescription('WARNING: UPS Schedule Shutdown')
upsBypassReturn = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,53))
if mibBuilder.loadTexts: upsBypassReturn.setDescription('The UPS return from Bypass Mode')
upsShortCircuitShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,54))
if mibBuilder.loadTexts: upsShortCircuitShutdown.setDescription('The UPS Short Circuit Shutdown')
upsInverterOutputFailShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,55))
if mibBuilder.loadTexts: upsInverterOutputFailShutdown.setDescription('The UPS Inverter Output Fail Shutdown')
upsBypassBreadkerOnShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,56))
if mibBuilder.loadTexts: upsBypassBreadkerOnShutdown.setDescription('The UPS Manual Bypass Breaker on Shutdown')
upsHighDCShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,57))
if mibBuilder.loadTexts: upsHighDCShutdown.setDescription('The UPS High DC Shutdown')
upsEmergencyStop = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,58))
if mibBuilder.loadTexts: upsEmergencyStop.setDescription('The UPS Emergency Stop')
upsInverterMode = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,59))
if mibBuilder.loadTexts: upsInverterMode.setDescription('The UPS Static Switch in Inverter Mode')
upsBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,60))
if mibBuilder.loadTexts: upsBypassMode.setDescription('The UPS Static Switch in Bypass Mode')
upsOverTemperatureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,61))
if mibBuilder.loadTexts: upsOverTemperatureShutdown.setDescription('The UPS Over Temperature Shutdown')
upsOverLoadShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,62))
if mibBuilder.loadTexts: upsOverLoadShutdown.setDescription('The UPS Overload Shutdown')
upsCapacityUnderrun = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,63))
if mibBuilder.loadTexts: upsCapacityUnderrun.setDescription('The UPS Capacity Underrun')
upsCapacityNormal = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,64))
if mibBuilder.loadTexts: upsCapacityNormal.setDescription('The UPS Capacity Normal')
upsLowBatteryShutdown = NotificationType((1, 3, 6, 1, 4, 1, 935) + (0,67))
if mibBuilder.loadTexts: upsLowBatteryShutdown.setDescription('The UPS Low Battery Shutdown')
mibBuilder.exportSymbols("XPPC-MIB", upsBaseTest=upsBaseTest, upsSmartBatteryRunTimeRemaining=upsSmartBatteryRunTimeRemaining, upsEnvSecurity4=upsEnvSecurity4, upsBypassacabnormal=upsBypassacabnormal, upsThreePhaseDCandRectifierStatusRecRotError=upsThreePhaseDCandRectifierStatusRecRotError, upsShortCircuitShutdown=upsShortCircuitShutdown, upsThreePhaseBypssSourceVoltageT=upsThreePhaseBypssSourceVoltageT, upsBaseBatteryTimeOnBattery=upsBaseBatteryTimeOnBattery, upsSmartBatteryTemperature=upsSmartBatteryTemperature, upsBaseOutput=upsBaseOutput, upsSmartControlFlashAndBeep=upsSmartControlFlashAndBeep, upsCapacityUnderrun=upsCapacityUnderrun, upsEnvSetting=upsEnvSetting, vaRatingOfDevice=vaRatingOfDevice, upsThreePhaseDCandRectifierStatusChargeStatus=upsThreePhaseDCandRectifierStatusChargeStatus, upsBaseIdent=upsBaseIdent, upsThreePhaseRatingRectifierVoltage=upsThreePhaseRatingRectifierVoltage, upsEnvUnderHumidity=upsEnvUnderHumidity, upsScheduleShutdown=upsScheduleShutdown, upsSmartConfigLowBatteryRunTime=upsSmartConfigLowBatteryRunTime, upsThreePhaseRatingRectifierFrequency=upsThreePhaseRatingRectifierFrequency, upsSmartConfigSetEEPROMDefaults=upsSmartConfigSetEEPROMDefaults, envHumidityNormal=envHumidityNormal, upsThreePhaseFaultStatusHighDCShutdown=upsThreePhaseFaultStatusHighDCShutdown, ups=ups, upsSmartConfigMinReturnCapacity=upsSmartConfigMinReturnCapacity, envSecurityAbnormal=envSecurityAbnormal, upsCapacityNormal=upsCapacityNormal, upsEnvOverTemperature=upsEnvOverTemperature, upsSmartTestCalibrationResults=upsSmartTestCalibrationResults, upsBypassacnormal=upsBypassacnormal, upsSmartConfigAlarm=upsSmartConfigAlarm, upsSmartControlSimulatePowerFail=upsSmartControlSimulatePowerFail, upsThreePhaseOutputLoadPercentageT=upsThreePhaseOutputLoadPercentageT, upsSmartConfigReturnDelay=upsSmartConfigReturnDelay, upsSmartInputMinLineVoltage=upsSmartInputMinLineVoltage, upsEnvUnderTemperature=upsEnvUnderTemperature, envSecurity1=envSecurity1, upsSmartInput=upsSmartInput, upsThreePhaseBypassGrp=upsThreePhaseBypassGrp, envGasAbnormal=envGasAbnormal, upsSmartConfigLowTransferVolt=upsSmartConfigLowTransferVolt, upsThreePhaseBatteryTemperature=upsThreePhaseBatteryTemperature, upsSmartConfigHighTransferVolt=upsSmartConfigHighTransferVolt, mconfigTrapsReceiversNum=mconfigTrapsReceiversNum, upsBaseInput=upsBaseInput, upsThreePhaseOutputFrequency=upsThreePhaseOutputFrequency, upsThreePhaseDCandRectifierStatusLowBattery=upsThreePhaseDCandRectifierStatusLowBattery, upsTest=upsTest, upsThreePhaseFaultStatusShortCircuit=upsThreePhaseFaultStatusShortCircuit, upsSmartBatteryCapacity=upsSmartBatteryCapacity, indexOfDevice=indexOfDevice, mconfigTrapsReceiversEntry=mconfigTrapsReceiversEntry, upsSmartConfig=upsSmartConfig, upsInputp=upsInputp, upsBaseConfigNumDevices=upsBaseConfigNumDevices, upsSmartConfigUpsSleepTime=upsSmartConfigUpsSleepTime, upsThreePhaseFaultStatusGrp=upsThreePhaseFaultStatusGrp, upsBaseOutputPhase=upsBaseOutputPhase, upsSmartControlRebootUps=upsSmartControlRebootUps, upsThreePhaseOutputVoltageS=upsThreePhaseOutputVoltageS, upsThreePhaseUPSStaticSwitchMode=upsThreePhaseUPSStaticSwitchMode, upsThreePhaseFaultStatusOverLoad=upsThreePhaseFaultStatusOverLoad, upsThreePhaseRatingBatteryVoltage=upsThreePhaseRatingBatteryVoltage, upsBypass=upsBypass, upsEnvTemperature=upsEnvTemperature, upsBypassReturn=upsBypassReturn, upsSmartOutputFrequency=upsSmartOutputFrequency, trapsIndex=trapsIndex, trapsReceiverAddr=trapsReceiverAddr, upsRebootStarted=upsRebootStarted, upsThreePhaseRatingOutputVoltage=upsThreePhaseRatingOutputVoltage, severityLevel=severityLevel, deviceAccept=deviceAccept, upsSmartControlUpsSleep=upsSmartControlUpsSleep, upsThreePhaseFaultStatusInverterOutputFail=upsThreePhaseFaultStatusInverterOutputFail, envUnderHumidity=envUnderHumidity, upsBypassFreFail=upsBypassFreFail, upsSmartControlTurnOnUpsLoad=upsSmartControlTurnOnUpsLoad, upsSmartTestDiagnosticsResults=upsSmartTestDiagnosticsResults, upsOnBattery=upsOnBattery, upsHighDCShutdown=upsHighDCShutdown, upsThreePhaseDCandRectifierStatusInAndOut=upsThreePhaseDCandRectifierStatusInAndOut, upsTempNormal=upsTempNormal, upsThreePhaseDCandRectifierStatusBatteryStatus=upsThreePhaseDCandRectifierStatusBatteryStatus, upsSmartControlUpsOff=upsSmartControlUpsOff, upsControlp=upsControlp, ppc=ppc, upsEnvWater=upsEnvWater, communicationEstablished=communicationEstablished, upsTemp=upsTemp, products=products, upsSmartInputLineFailCause=upsSmartInputLineFailCause, upsEnvironment=upsEnvironment, upsBatteryp=upsBatteryp, upsEnvHumidity=upsEnvHumidity, returnFromLowBattery=returnFromLowBattery, upsBaseConfigDeviceEntry=upsBaseConfigDeviceEntry, upsBaseControlConserveBattery=upsBaseControlConserveBattery, upsEnvOverHumidity=upsEnvOverHumidity, upsEnvSecurity3=upsEnvSecurity3, upsSmartIdentDateOfManufacture=upsSmartIdentDateOfManufacture, upsLowBatteryShutdown=upsLowBatteryShutdown, lowBattery=lowBattery, upsBaseBatteryLastReplaceDate=upsBaseBatteryLastReplaceDate, upsBypassMode=upsBypassMode, envSecurity5=envSecurity5, upsSmartBatteryCurrent=upsSmartBatteryCurrent, upsThreePhaseOutputLoadPercentageS=upsThreePhaseOutputLoadPercentageS, envSmokeAbnormal=envSmokeAbnormal, envWaterAbnormal=envWaterAbnormal, upsThreePhaseInputVoltageR=upsThreePhaseInputVoltageR, upsThreePhaseOutputVoltageR=upsThreePhaseOutputVoltageR, upsThreePhaseInputVoltageT=upsThreePhaseInputVoltageT, upsSmartOutputVoltage=upsSmartOutputVoltage, upsSmartControl=upsSmartControl, upsBaseConfigDeviceTable=upsBaseConfigDeviceTable, upsThreePhaseInputVoltageS=upsThreePhaseInputVoltageS, upsThreePhaseRatingBypassFrequency=upsThreePhaseRatingBypassFrequency, upsEnvSecurity6=upsEnvSecurity6, upsSmartInputMaxLineVoltage=upsSmartInputMaxLineVoltage, upsSmartInputFrequency=upsSmartInputFrequency, upsSmartTestIndicators=upsSmartTestIndicators, upsSmartOutputLoad=upsSmartOutputLoad, upsSmartTestDiagnosticSchedule=upsSmartTestDiagnosticSchedule, receiverAccept=receiverAccept, envTemperatureNormal=envTemperatureNormal, upsThreePhaseOutputGrp=upsThreePhaseOutputGrp, upsSmartBatteryFullChargeVoltage=upsSmartBatteryFullChargeVoltage, upsThreePhaseOutputVoltageT=upsThreePhaseOutputVoltageT, upsInverterOutputFailShutdown=upsInverterOutputFailShutdown, upsEnvSmoke=upsEnvSmoke, upsSmartTestLastDiagnosticsDate=upsSmartTestLastDiagnosticsDate, upsThreePhaseBypssSourceVoltageS=upsThreePhaseBypssSourceVoltageS, upsThreePhaseRatingOutputFrequency=upsThreePhaseRatingOutputFrequency, upsDiagnosticsFailed=upsDiagnosticsFailed, upsThreePhaseRatingGrp=upsThreePhaseRatingGrp, upsThreePhaseFaultStatusBypassBreaker=upsThreePhaseFaultStatusBypassBreaker, upsEnvStatus=upsEnvStatus, powerRestored=powerRestored, upsEnvSecurity2=upsEnvSecurity2, upsSmartIdent=upsSmartIdent, upsSmartInputLineVoltage=upsSmartInputLineVoltage, envSecurity3=envSecurity3, upsBaseConfig=upsBaseConfig, upsThreePhaseBypassSourceFrequency=upsThreePhaseBypassSourceFrequency, upsThreePhaseInputGrp=upsThreePhaseInputGrp, upsBaseBattery=upsBaseBattery, upsBaseIdentModel=upsBaseIdentModel, upsEnvSecurity5=upsEnvSecurity5, upsConfigp=upsConfigp, upsThreePhaseDCandRectifierStatusLowBatteryShutdown=upsThreePhaseDCandRectifierStatusLowBatteryShutdown, upsDiagnosticsPassed=upsDiagnosticsPassed, upsBaseInputPhase=upsBaseInputPhase, communicationLost=communicationLost, upsSmartTestDiagnostics=upsSmartTestDiagnostics, upsSmartTestRuntimeCalibration=upsSmartTestRuntimeCalibration, upsThreePhaseBatteryTimeRemain=upsThreePhaseBatteryTimeRemain, upsThreePhaseUPSStatusBypassFreqFail=upsThreePhaseUPSStatusBypassFreqFail, upsBypassBreadkerOnShutdown=upsBypassBreadkerOnShutdown, upsIdentp=upsIdentp, upsOverTemperatureShutdown=upsOverTemperatureShutdown, upsSmartIdentAgentFirmwareRevision=upsSmartIdentAgentFirmwareRevision, upsThreePhaseBatteryCapacityPercentage=upsThreePhaseBatteryCapacityPercentage, upsBaseBatteryStatus=upsBaseBatteryStatus, upsOverLoadShutdown=upsOverLoadShutdown, envSecurity7=envSecurity7, upsSmartConfigSensitivity=upsSmartConfigSensitivity, upsThreePhaseFaultStatusEmergencyStop=upsThreePhaseFaultStatusEmergencyStop, upsSmartTestCalibrationDate=upsSmartTestCalibrationDate, upsThreePhase=upsThreePhase, upsThreePhaseUPSStatusInverterOperating=upsThreePhaseUPSStatusInverterOperating, upsThreePhaseBatteryGrp=upsThreePhaseBatteryGrp, upsThreePhaseInputFrequency=upsThreePhaseInputFrequency, hardware=hardware, envOverHumidity=envOverHumidity, envWaterNormal=envWaterNormal, upsWokeUp=upsWokeUp, upsDischarged=upsDischarged, receiverCommunityString=receiverCommunityString, upsLoadNormal=upsLoadNormal, upsSmartBatteryReplaceIndicator=upsSmartBatteryReplaceIndicator, upsSmartConfigRatedOutputVoltage=upsSmartConfigRatedOutputVoltage, upsOutputp=upsOutputp, upsThreePhaseUPSStatusManualBypassBreaker=upsThreePhaseUPSStatusManualBypassBreaker, upsRecroterror=upsRecroterror, upsThreePhaseOutputLoadPercentageR=upsThreePhaseOutputLoadPercentageR, upsInverterMode=upsInverterMode, upsSmartTest=upsSmartTest, upsThreePhaseUPSStatusACStatus=upsThreePhaseUPSStatusACStatus, upsTurnedOff=upsTurnedOff, upsSleeping=upsSleeping, upsEmergencyStop=upsEmergencyStop, upsThreePhaseUPSStatusGrp=upsThreePhaseUPSStatusGrp, upsThreePhaseRatingBypassVoltage=upsThreePhaseRatingBypassVoltage, upsEnvSecurity1=upsEnvSecurity1, upsTestp=upsTestp, upsBaseOutputStatus=upsBaseOutputStatus, envOverTemperature=envOverTemperature, upsThreePhaseBatteryVoltage=upsThreePhaseBatteryVoltage, upsOverLoad=upsOverLoad, upsSmartBattery=upsSmartBattery, upsSmartConfigShutoffDelay=upsSmartConfigShutoffDelay, upsSmartIdentUpsSerialNumber=upsSmartIdentUpsSerialNumber, envSecurity4=envSecurity4, envSecurity6=envSecurity6, mconfig=mconfig, upsBaseIdentUpsName=upsBaseIdentUpsName, envSecurity2=envSecurity2, upsThreePhaseDCandRectifierStatusGrp=upsThreePhaseDCandRectifierStatusGrp, upsEnvSecurity7=upsEnvSecurity7, upsSmartConfigAlarmTimer=upsSmartConfigAlarmTimer, upsThreePhaseRatingPower=upsThreePhaseRatingPower, upsThreePhaseDCandRectifierStatusRecOperating=upsThreePhaseDCandRectifierStatusRecOperating, mconfigTrapsReceiversTable=mconfigTrapsReceiversTable, upsThreePhaseBatteryCurrent=upsThreePhaseBatteryCurrent, upsSmartBatteryVoltage=upsSmartBatteryVoltage, envUnderTemperature=envUnderTemperature, nameOfDevice=nameOfDevice, upsThreePhaseFaultStatusOverTemperature=upsThreePhaseFaultStatusOverTemperature, upsSmartIdentFirmwareRevision=upsSmartIdentFirmwareRevision, upsSmartOutput=upsSmartOutput, ppcmgmt=ppcmgmt, upsThreePhaseBypssSourceVoltageR=upsThreePhaseBypssSourceVoltageR, upsBaseControl=upsBaseControl, boostOn=boostOn)
